name: rustc_llvm_with_lld

# gh act --job build -s GITHUB_TOKEN="$(gh auth token)" --reuse

# only self-triggered
on:
  workflow_dispatch:
    inputs:

permissions:
  packages: write
  contents: write

jobs:
  build:
    # strategy:
    #   matrix:
    #     WebAssembly: [true, false]

    runs-on: ubuntu-latest
    env:
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
    steps:
      - name: copy source
        uses: actions/checkout@v4
        with:
          repository: 'bjorn3/rust'
          fetch-depth: 0
          submodules: 'true'
          ref: 'compile_rustc_for_wasm17'
          path: 'rust'

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: 'rust_wasm'
          ref: 'gh-actions'


      - name: install-wasi-sdk
        working-directory: '${{ github.workspace }}/rust'
        run: |
          curl -OL https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-24/wasi-sdk-24.0-x86_64-linux.tar.gz
          tar -xzf wasi-sdk-24.0-x86_64-linux.tar.gz

      - name: free space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true

          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false

      - name: install rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: update
        run: |
          sudo apt-get update
          sudo apt upgrade -y
          sudo apt install -y build-essential cmake pkg-config libclang-dev

      # https://devkitpro.org/wiki/devkitPro_pacman
      - name: install devkitPro
        run: |
          wget https://apt.devkitpro.org/install-devkitpro-pacman
          chmod +x ./install-devkitpro-pacman
          echo y | sudo ./install-devkitpro-pacman

      # https://pkgsrc.smartos.org/install-on-linux/
      - name: install pkgsrc
        run: |
          sudo apt install -y cvs libncurses-dev gcc g++ zlib1g-dev zlib1g libssl-dev libudev-dev gawk unzip curl
          curl -OL https://cdn.netbsd.org/pub/pkgsrc/stable/pkgsrc.tar.xz
          tar -xJf pkgsrc.tar.xz
          rm -f pkgsrc.tar.xz
          rm -rf pkgsrc/bootstrap/work
          rm -rf /usr/pkg
          cd pkgsrc/bootstrap
          ./bootstrap
          sudo dkp-pacman -Syu --noconfirm

          echo "/usr/pkg/sbin" >> $GITHUB_PATH
          echo "/usr/pkg/bin" >> $GITHUB_PATH

      - name: install dependencies
        run: |
          sudo apt install -y gcc-multilib              g++-multilib
          sudo apt install -y gcc-riscv64-linux-gnu     g++-riscv64-linux-gnu     libc6-dev-riscv64-cross
          sudo apt install -y gcc-powerpc64-linux-gnu   g++-powerpc64-linux-gnu   libc6-dev-ppc64-powerpc-cross
          sudo apt install -y gcc-powerpc-linux-gnu     g++-powerpc-linux-gnu     libc6-dev-ppc64-powerpc-cross
          sudo apt install -y gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu
          sudo apt install -y gcc-aarch64-linux-gnu     g++-aarch64-linux-gnu
          sudo apt install -y gcc-arm-linux-gnueabihf   g++-arm-linux-gnueabihf
          sudo apt install -y gcc-arm-linux-gnueabi     g++-arm-linux-gnueabi
          sudo apt install -y gcc-s390x-linux-gnu       g++-s390x-linux-gnu       linux-libc-dev-s390x-cross
          sudo apt install -y gcc-arm-none-eabi

      - name: rewrite
        run: |
          cd rust_wasm/config_rewriter
          cargo run -- ../../rust/config.llvm.toml all linux
          cargo clean
          echo "rewrite done"

      - name: build
        working-directory: '${{ github.workspace }}/rust'
        env:
          WASI_SDK_PATH: ${{ github.workspace }}/rust/wasi-sdk-24.0-x86_64-linux
        run: |
          ./x.py install --config config.llvm.toml

      - name: create tarball
        working-directory: '${{ github.workspace }}/rust'
        run: |
          tar -cvzf dist/bin/rustc.wasm.tar.gz dist/bin/rustc.wasm
          rm dist/bin/rustc.wasm

      - name: Configure git to trust the workspace despite the different owner
        run:
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: upload bin
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: rust/dist/bin
          branch: rustc_llvm_with_lld
          target-folder: rustc_llvm_with_lld/dist/bin
          clean: false
          commit-message: "update bin"

      # - name: upload wasm32-unknown-unknown
      #   uses: JamesIves/github-pages-deploy-action@v4
      #   with:
      #     folder: rust/dist/lib/rustlib/wasm32-unknown-unknown
      #     branch: rustc_llvm_with_lld
      #     target-folder: rustc_llvm_with_lld/dist/lib/rustlib/wasm32-unknown-unknown
      #     clean: false
      #     commit-message: "update wasm32-unknown-unknown"

      - name: upload wasm32-wasip1
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: rust/dist/lib/rustlib/wasm32-wasip1
          branch: rustc_llvm_with_lld
          target-folder: rustc_llvm_with_lld/dist/lib/rustlib/wasm32-wasip1
          clean: false
          commit-message: "update wasm32-wasip1"

      # - name: upload wasm32-wasip1-threads
      #   uses: JamesIves/github-pages-deploy-action@v4
      #   with:
      #     folder: rust/dist/lib/rustlib/wasm32-wasip1-threads
      #     branch: rustc_llvm_with_lld
      #     target-folder: rustc_llvm_with_lld/dist/lib/rustlib/wasm32-wasip1-threads
      #     clean: false
      #     commit-message: "update wasm32-wasip1-threads"

      - name: upload x86_64-unknown-linux-gnu
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: rust/dist/lib/rustlib/x86_64-unknown-linux-gnu
          branch: rustc_llvm_with_lld
          target-folder: rustc_llvm_with_lld/dist/lib/rustlib/x86_64-unknown-linux-gnu
          clean: false
          commit-message: "update x86_64-unknown-linux-gnu"
