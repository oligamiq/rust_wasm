name: rustc_llvm_with_lld

# gh act --job build -s GITHUB_TOKEN="$(gh auth token)" --reuse

# only self-triggered
on:
  workflow_dispatch:
    inputs:
      job:
        description: "Select job to run"
        required: true
        type: choice
        options:
          - install
          - dist-linux
          - dist-macos
          - dist-windows

permissions:
  packages: write
  contents: write

jobs:
  install:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.job == 'install' || github.event.inputs.job == '' }}
    steps:
      - name: copy source
        uses: actions/checkout@v4
        with:
          repository: 'bjorn3/rust'
          submodules: 'true'
          ref: 'compile_rustc_for_wasm17'
          path: 'rust'

      - uses: actions/checkout@v4
        with:
          path: 'rust_wasm'
          ref: 'gh-actions'
          fetch-depth: 0

      - name: install-wasi-sdk
        working-directory: '${{ github.workspace }}/rust'
        run: |
          curl -OL https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-24/wasi-sdk-24.0-x86_64-linux.tar.gz
          tar -xzf wasi-sdk-24.0-x86_64-linux.tar.gz

      - name: free space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true

          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false

      - name: install rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: update
        run: |
          sudo apt-get update
          sudo apt upgrade -y
          sudo apt install -y build-essential cmake pkg-config libclang-dev

      - name: install toolchain-for-building-rustc
        working-directory: '${{ github.workspace }}/rust'
        env:
          RUST_CONFIGURE_ARGS: "-W warnings"
          RUSTFLAGS: "-W warnings"
        run: |
          cargo install --git https://github.com/oligamiq/toolchain-for-building-rustc
          toolchain-for-building-rustc --tier all --os linux --os windows --os mac -f config.llvm.toml --only-llvm

      # - name: rewrite
      #   run: |
      #     cd rust_wasm/config_rewriter
      #     cargo run -- ../../rust/config.llvm.toml all false
      #     cargo clean
      #     echo "rewrite done"

      - name: build install
        working-directory: '${{ github.workspace }}/rust'
        env:
          WASI_SDK_PATH: ${{ github.workspace }}/rust/wasi-sdk-24.0-x86_64-linux
          RUST_CONFIGURE_ARGS: "-W warnings"
          RUSTFLAGS: "-W warnings"
        run: |
          ./x.py install --config config.llvm.toml

      - name: cache build directory
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/rust/build
          key: build-dir-${{ runner.os }}-compile_rustc_for_wasm17

      - name: Configure git to trust the workspace despite the different owner
        run:
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: install wasm-opt
        run: |
          curl -OL https://github.com/WebAssembly/binaryen/releases/download/version_119/binaryen-version_119-x86_64-linux.tar.gz
          tar -xzf binaryen-version_119-x86_64-linux.tar.gz
          sudo cp binaryen-version_119/bin/wasm-opt /usr/local/bin/wasm-opt
          rm -rf binaryen-version_119-x86_64-linux.tar.gz binaryen-version_119

      - name: upload bin
        working-directory: '${{ github.workspace }}/rust_wasm'
        run: |
          # backup config_rewriter
          cp -r ${{ github.workspace }}/rust_wasm/config_rewriter /tmp/config_rewriter

          # change branch
          git pull
          git branch -a
          git switch rustc_llvm_with_lld-bins
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          # reset files
          rm -rf *
          mkdir -p dist/bin

          # prepare files
          cd ${{ github.workspace }}/rust
          tar -cvzf dist/bin/rustc.wasm.tar.gz dist/bin/rustc.wasm
          # optimize wasm
          cd /tmp/config_rewriter
          cargo run --bin wasm_optimizer -- ${{ github.workspace }}/rust/dist/bin/rustc.wasm
          mv opt.wasm ${{ github.workspace }}/rust_wasm/rustc_opt.wasm
          rm ${{ github.workspace }}/rust/dist/bin/rustc.wasm
          cd ${{ github.workspace }}/rust_wasm

          # copy files

          # rust-gdb, rust-gdbgui, rust-lldb, rustc.wasm.tar.gz and optimized wasm
          mv ${{ github.workspace }}/rust/dist/bin/rustc.wasm.tar.gz dist/bin/rustc.wasm.tar.gz
          mv ${{ github.workspace }}/rust/dist/bin/rust-gdb dist/bin/rust-gdb
          mv ${{ github.workspace }}/rust/dist/bin/rust-gdbgui dist/bin/rust-gdbgui
          mv ${{ github.workspace }}/rust/dist/bin/rust-lldb dist/bin/rust-lldb
          tar -cvzf rustc_opt.wasm.tar.gz rustc_opt.wasm
          rm rustc_opt.wasm
          git add -A
          git commit -m "reset files and add new files about rustc.wasm"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ github.token }}
          directory: "${{ github.workspace }}/rust_wasm"
          branch: rustc_llvm_with_lld-bins

  dist-linux:
    # strategy:
    #   matrix:
    #     WebAssembly: [true, false]

    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.job == 'dist-linux' || github.event.inputs.job == '' }}
    env:
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
    steps:
      - name: copy source
        uses: actions/checkout@v4
        with:
          repository: 'bjorn3/rust'
          submodules: 'true'
          ref: 'compile_rustc_for_wasm17'
          path: 'rust'

      - uses: actions/checkout@v4
        with:
          path: 'rust_wasm'
          ref: 'gh-actions'
          fetch-depth: 0

      - name: rustbuild setup
        run: |
          sudo groupadd -r rustbuild && sudo useradd -m -r -g rustbuild rustbuild
          sudo mkdir -p /x-tools && sudo chown rustbuild:rustbuild /x-tools
          sudo chmod 777 /x-tools
          sudo mkdir -p /tmp && sudo chown rustbuild:rustbuild /tmp
          sudo chmod 777 /tmp
          sudo chmod 777 /usr/local/lib/
          sudo chmod 777 /usr/local/bin/
          sudo chmod 777 /usr/local/
          sudo chmod 777 /usr/bin/
          sudo chmod 777 /
          sudo chmod 777 /lib
          sudo chmod 777 /etc
          echo '/usr/local/bin/' >> $GITHUB_PATH

      - name: install clang
        run: |
          sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
          echo '/usr/bin' >> $GITHUB_PATH

      - name: install-wasi-sdk
        working-directory: '${{ github.workspace }}/rust'
        run: |
          curl -OL https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-24/wasi-sdk-24.0-x86_64-linux.tar.gz
          tar -xzf wasi-sdk-24.0-x86_64-linux.tar.gz

      - name: free space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true

          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false

      - name: install rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: update
        run: |
          sudo apt-get update
          sudo apt upgrade -y
          sudo apt install -y build-essential cmake pkg-config libclang-dev
          # install mingw for windows
          sudo apt install -y mingw-w64

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: install ndk
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r27c
          link-to-sdk: true
          local-cache: false

      - name: install ndk path
        run: |
          ls -l ${{ steps.setup-ndk.outputs.ndk-path }}
          mkdir -p ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins
          sudo ln -sf '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android35-clang' '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/aarch64-linux-android-clang'
          sudo ln -sf '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android35-clang' '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/i686-linux-android-clang'
          sudo ln -sf '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi35-clang' '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/arm-linux-androideabi-clang'
          sudo ln -sf '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/riscv64-linux-android35-clang' '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/riscv64-linux-android-clang'
          sudo ln -sf '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android35-clang' '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/x86_64-linux-android-clang'
          sudo ln -sf '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang' '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/clang'
          sudo ln -sf '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android35-clang' '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/aarch64-linux-android-clang++'
          sudo ln -sf '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android35-clang++' '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/i686-linux-android-clang++'
          sudo ln -sf '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi35-clang++' '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/arm-linux-androideabi-clang++'
          sudo ln -sf '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/riscv64-linux-android35-clang++' '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/riscv64-linux-android-clang++'
          sudo ln -sf '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android35-clang++' '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/x86_64-linux-android-clang++'
          sudo ln -sf '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++' '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/clang++'
          sudo ln -sf '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar' '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/llvm-ar'

          sudo chmod +x '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/aarch64-linux-android-clang'
          sudo chmod +x '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/i686-linux-android-clang'
          sudo chmod +x '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/arm-linux-androideabi-clang'
          sudo chmod +x '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/riscv64-linux-android-clang'
          sudo chmod +x '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/x86_64-linux-android-clang'
          sudo chmod +x '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/aarch64-linux-android-clang++'
          sudo chmod +x '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/i686-linux-android-clang++'
          sudo chmod +x '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/arm-linux-androideabi-clang++'
          sudo chmod +x '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/riscv64-linux-android-clang++'
          sudo chmod +x '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/x86_64-linux-android-clang++'
          sudo chmod +x '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/clang'
          sudo chmod +x '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/clang++'
          sudo chmod +x '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins/llvm-ar'

          echo '${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bins' >> $GITHUB_PATH

          echo 'ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}' >> $GITHUB_ENV

      - name: check clang
        run: |
          clang --version
          x86_64-linux-android-clang --version

      # - name: install musl dependencies x86_64
      #   run: |
      #     FLAG_FILE="/tmp/musl-x86_64-installed"
      #     if [ ! -f "$FLAG_FILE" ]; then
      #       mkdir ~/build
      #       cd ~/build
      #       curl -OL https://oligamiq.github.io/cdn/musl-bin/x86_64-linux-musl-cross.tgz_aa
      #       curl -OL https://oligamiq.github.io/cdn/musl-bin/x86_64-linux-musl-cross.tgz_ab
      #       cat x86_64-linux-musl-cross.tgz_* | tar -xzv
      #       rm x86_64-linux-musl-cross.tgz_*
      #       rm -rf /musl-x86_64
      #       mkdir -p /musl-x86_64
      #       sudo mv x86_64-linux-musl-cross/* /musl-x86_64
      #       cd /
      #       rm -rf ~/build/
      #       sudo ln -sf /musl-x86_64/bin/x86_64-linux-musl-gcc /usr/local/bin/musl-gcc
      #       sudo ln -sf /musl-x86_64/bin/x86_64-linux-musl-g++ /usr/local/bin/musl-g++
      #       touch "$FLAG_FILE"
      #     else
      #       echo "musl x86_64 is already installed, skipping installation."
      #     fi

      # https://github.com/rust-lang/rust/blob/65b3877488ccfef3b1a903bfdd269559c59b957c/src/doc/rustc/src/platform-support/wasm32-unknown-emscripten.md
      - name: install emscripten
        run: |
          FLAG_FILE="/tmp/emscripten-installed"
          rm -f "$FLAG_FILE"
          if [ ! -f "$FLAG_FILE" ]; then
            rm -rf /emsdk
            sudo mkdir -p /emsdk
            sudo chmod 777 /emsdk
            cd /emsdk
            git clone https://github.com/emscripten-core/emsdk.git --depth 1
            ./emsdk/emsdk install 3.1.68
            ./emsdk/emsdk activate 3.1.68
            source ./emsdk/emsdk_env.sh
            echo '/emsdk/emsdk' >> $GITHUB_PATH
            echo '/emsdk/emsdk/upstream/emscripten' >> $GITHUB_PATH
            touch "$FLAG_FILE"
          else
            echo "emscripten is already installed, skipping installation."
          fi

      # - name: rewrite
      #   run: |
      #     cd rust_wasm/config_rewriter
      #     cargo run -- ../../rust/config.llvm.toml all linux
      #     cargo clean
      #     echo "rewrite done"

      - name: restore cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/rust/build
          key: build-dir-${{ runner.os }}-compile_rustc_for_wasm17

      - name: install toolchain-for-building-rustc
        working-directory: '${{ github.workspace }}/rust'
        env:
          RUST_CONFIGURE_ARGS: "-W warnings"
          RUSTFLAGS: "-W warnings"
        run: |
          cargo install --git https://github.com/oligamiq/toolchain-for-building-rustc
          toolchain-for-building-rustc --tier 1 --tier 2-host --os linux -t sparcv9-sun-solaris --install --no-cache -f config.llvm.toml -t arm-unknown-linux-musleabi -t arm-unknown-linux-musleabihf -t i586-unknown-linux-gnu -t i686-unknown-linux-musl -t wasm32-wasip1

      - name: build dist
        working-directory: '${{ github.workspace }}/rust'
        env:
          WASI_SDK_PATH: ${{ github.workspace }}/rust/wasi-sdk-24.0-x86_64-linux
          RUST_CONFIGURE_ARGS: "-W warnings"
          RUSTFLAGS: "-W warnings"
        run: |
          export RUST_CONFIGURE_ARGS='${{ env.RUST_CONFIGURE_ARGS }}'
          ./x.py install --config config.llvm.toml

      - name: Configure git to trust the workspace despite the different owner
        run:
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: upload
        working-directory: '${{ github.workspace }}/rust_wasm'
        run: |
          git pull
          git branch -a
          git switch rustc_llvm_with_lld-bins-tier2-host
          rm -rf dist
          mv ../rust/dist dist
          rm -rf dist/bin
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add *
          git commit -m "update dist"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ github.token }}
          directory: "${{ github.workspace }}/rust_wasm"
          branch: rustc_llvm_with_lld-bins-tier2-host

  dist-macos:
    runs-on: macos-latest
    if: ${{ github.event.inputs.job == 'dist-macos' || github.event.inputs.job == '' }}
    env:
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
    steps:
      - name: copy source
        uses: actions/checkout@v4
        with:
          repository: 'bjorn3/rust'
          submodules: 'true'
          ref: 'compile_rustc_for_wasm17'
          path: 'rust'

      - uses: actions/checkout@v4
        with:
          path: 'rust_wasm'
          ref: 'gh-actions'
          fetch-depth: 0

      - name: free space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true

          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false

      - name: install rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: install llvm
        env:
          LLVM_VERSION: "15.0.7"
          MIRRORS_BASE: "https://ci-mirrors.rust-lang.org/rustc"
        run: |
          file="${MIRRORS_BASE}/clang%2Bllvm-${LLVM_VERSION}-x86_64-apple-darwin21.0.tar.xz"
          curl -f "${file}" -o "clang+llvm-${LLVM_VERSION}-x86_64-apple-darwin21.0.tar.xz"
          tar xJf "clang+llvm-${LLVM_VERSION}-x86_64-apple-darwin21.0.tar.xz"
          bindir="$(pwd)/clang+llvm-${LLVM_VERSION}-x86_64-apple-darwin21.0/bin"
          echo "CC=${bindir}/clang" >> $GITHUB_ENV
          echo "CXX=${bindir}/clang++" >> $GITHUB_ENV
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "AR=ar" >> $GITHUB_ENV
          echo "${bindir}" >> $GITHUB_PATH

      - name: install toolchain-for-building-rustc
        working-directory: '${{ github.workspace }}/rust'
        env:
          RUST_CONFIGURE_ARGS: "-W warnings"
          RUSTFLAGS: "-W warnings"
        run: |
          cargo install --git https://github.com/oligamiq/toolchain-for-building-rustc
          toolchain-for-building-rustc --tier 1 --tier 2-host --os mac --install --no-cache -f config.llvm.toml --overwrite -t wasm32-wasip1

      - name: install-wasi-sdk
        working-directory: '${{ github.workspace }}/rust'
        run: |
          curl -OL https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-24/wasi-sdk-24.0-arm64-macos.tar.gz
          tar -xzf wasi-sdk-24.0-arm64-macos.tar.gz

      - name: build dist
        working-directory: '${{ github.workspace }}/rust'
        env:
          WASI_SDK_PATH: ${{ github.workspace }}/rust/wasi-sdk-24.0-arm64-macos
          RUST_CONFIGURE_ARGS: "-W warnings"
          RUSTFLAGS: "-W warnings"
          CC: "${{ github.workspace }}/clang+llvm-15.0.7-x86_64-apple-darwin21.0/bin/clang"
          CXX: "${{ github.workspace }}/clang+llvm-15.0.7-x86_64-apple-darwin21.0/bin/clang++"
        run: |
          export RUST_CONFIGURE_ARGS='${{ env.RUST_CONFIGURE_ARGS }}'
          ./x.py install --config config.llvm.toml

      - name: Configure git to trust the workspace despite the different owner
        run:
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: upload
        working-directory: '${{ github.workspace }}/rust_wasm'
        run: |
          git pull
          git branch -a
          git switch rustc_llvm_with_lld-bins-tier2-host-mac
          rm -rf dist
          mv ../rust/dist dist
          rm -rf dist/bin
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add *
          git commit -m "update dist"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ github.token }}
          directory: "${{ github.workspace }}/rust_wasm"
          branch: rustc_llvm_with_lld-bins-tier2-host-mac

  dist-windows:
    runs-on: windows-latest
    if: ${{ github.event.inputs.job == 'dist-windows' || github.event.inputs.job == '' }}
    env:
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
    steps:
      - name: copy source
        uses: actions/checkout@v4
        with:
          repository: 'bjorn3/rust'
          submodules: 'true'
          ref: 'compile_rustc_for_wasm17'
          path: 'rust'

      - uses: actions/checkout@v4
        with:
          path: 'rust_wasm'
          ref: 'gh-actions'
          fetch-depth: 0

      - name: free space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true

          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false

      - name: install rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: install toolchain-for-building-rustc
        working-directory: '${{ github.workspace }}/rust'
        env:
          RUST_CONFIGURE_ARGS: "-W warnings"
          RUSTFLAGS: "-W warnings"
        run: |
          cargo install --git https://github.com/oligamiq/toolchain-for-building-rustc
          toolchain-for-building-rustc --tier 1 --tier 2-host --os windows --install --no-cache -f config.llvm.toml --overwrite -t wasm32-wasip1

      - name: install-wasi-sdk
        working-directory: '${{ github.workspace }}/rust'
        run: |
          curl -OL https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-24/wasi-sdk-24.0-x86_64-linux.tar.gz
          tar -xzf wasi-sdk-24.0-x86_64-linux.tar.gz

      - name: build dist
        working-directory: '${{ github.workspace }}/rust'
        env:
          WASI_SDK_PATH: ${{ github.workspace }}/rust/wasi-sdk-24.0-x86_64-linux
          RUST_CONFIGURE_ARGS: "-W warnings"
          RUSTFLAGS: "-W warnings"
        run: |
          python ./x.py install --config config.llvm.toml

      - name: Configure git to trust the workspace despite the different owner
        run:
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: upload
        working-directory: '${{ github.workspace }}/rust_wasm'
        run: |
          git pull
          git branch -a
          git switch rustc_llvm_with_lld-bins-tier2-host-windows

          # Remove 'dist' directory if it exists
          if (Test-Path -Path "dist") {
              Remove-Item -Recurse -Force -Path "dist"
          }

          # Move directory using PowerShell's Move-Item
          if (Test-Path -Path "..\rust\dist") {
              Move-Item -Path "..\rust\dist" -Destination "dist"
          }

          # Remove 'dist/bin' directory if it exists
          if (Test-Path -Path "dist\bin") {
              Remove-Item -Recurse -Force -Path "dist\bin"
          }

          # Configure Git user
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Add changes, commit, and push
          git add *
          git commit -m "update dist"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ github.token }}
          directory: "${{ github.workspace }}/rust_wasm"
          branch: rustc_llvm_with_lld-bins-tier2-host-windows
